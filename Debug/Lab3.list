
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002768  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002894  08002894  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002894  08002894  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002894  08002894  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800289c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000084  08002920  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002920  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009810  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c82  00000000  00000000  000298bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c0b  00000000  00000000  0002c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbbc  00000000  00000000  000435a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823fd  00000000  00000000  0004f15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d155c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a70  00000000  00000000  000d15b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	0800285c 	.word	0x0800285c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	0800285c 	.word	0x0800285c

0800014c <buttonStatesInit>:
		BUTTON_RELEASED,
		BUTTON_RELEASED
};


void buttonStatesInit(void ){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(BUTTON1_GPIO_Port, BUTTON1_Pin ,1);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	480b      	ldr	r0, [pc, #44]	; (8000184 <buttonStatesInit+0x38>)
 8000158:	f001 fb57 	bl	800180a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BUTTON2_GPIO_Port, BUTTON2_Pin ,1);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000162:	4808      	ldr	r0, [pc, #32]	; (8000184 <buttonStatesInit+0x38>)
 8000164:	f001 fb51 	bl	800180a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BUTTON3_GPIO_Port, BUTTON3_Pin ,1);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800016e:	4805      	ldr	r0, [pc, #20]	; (8000184 <buttonStatesInit+0x38>)
 8000170:	f001 fb4b 	bl	800180a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BUTTON4_GPIO_Port, BUTTON4_Pin ,1);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <buttonStatesInit+0x38>)
 800017c:	f001 fb45 	bl	800180a <HAL_GPIO_WritePin>

}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010800 	.word	0x40010800

08000188 <fsm_for_BUTTON1>:
uint8_t mode = 1;
uint16_t DURATION = 1;
void fsm_for_BUTTON1(void){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0

	switch(buttonStates[BUTTON1]){
 800018c:	4b37      	ldr	r3, [pc, #220]	; (800026c <fsm_for_BUTTON1+0xe4>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2b02      	cmp	r3, #2
 8000192:	d03f      	beq.n	8000214 <fsm_for_BUTTON1+0x8c>
 8000194:	2b02      	cmp	r3, #2
 8000196:	dc67      	bgt.n	8000268 <fsm_for_BUTTON1+0xe0>
 8000198:	2b00      	cmp	r3, #0
 800019a:	d002      	beq.n	80001a2 <fsm_for_BUTTON1+0x1a>
 800019c:	2b01      	cmp	r3, #1
 800019e:	d025      	beq.n	80001ec <fsm_for_BUTTON1+0x64>
				buttonStates[BUTTON1] = BUTTON_RELEASED;
			}
			break;
	}

}
 80001a0:	e062      	b.n	8000268 <fsm_for_BUTTON1+0xe0>
			if(is_button_pressed(BUTTON1)){
 80001a2:	2000      	movs	r0, #0
 80001a4:	f000 f9f2 	bl	800058c <is_button_pressed>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d057      	beq.n	800025e <fsm_for_BUTTON1+0xd6>
				mode++;
 80001ae:	4b30      	ldr	r3, [pc, #192]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	3301      	adds	r3, #1
 80001b4:	b2da      	uxtb	r2, r3
 80001b6:	4b2e      	ldr	r3, [pc, #184]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 80001b8:	701a      	strb	r2, [r3, #0]
				DURATION = 1;
 80001ba:	4b2e      	ldr	r3, [pc, #184]	; (8000274 <fsm_for_BUTTON1+0xec>)
 80001bc:	2201      	movs	r2, #1
 80001be:	801a      	strh	r2, [r3, #0]
				if(mode > 4) {mode = 1;clearAllLEDs();}
 80001c0:	4b2b      	ldr	r3, [pc, #172]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b04      	cmp	r3, #4
 80001c6:	d904      	bls.n	80001d2 <fsm_for_BUTTON1+0x4a>
 80001c8:	4b29      	ldr	r3, [pc, #164]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	701a      	strb	r2, [r3, #0]
 80001ce:	f000 fa79 	bl	80006c4 <clearAllLEDs>
				updateClockBuffer(mode,DURATION);
 80001d2:	4b27      	ldr	r3, [pc, #156]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b26      	ldr	r3, [pc, #152]	; (8000274 <fsm_for_BUTTON1+0xec>)
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f000 fdfa 	bl	8000dd8 <updateClockBuffer>
				buttonStates[BUTTON1] = BUTTON_PRESSED;
 80001e4:	4b21      	ldr	r3, [pc, #132]	; (800026c <fsm_for_BUTTON1+0xe4>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	701a      	strb	r2, [r3, #0]
			break;
 80001ea:	e038      	b.n	800025e <fsm_for_BUTTON1+0xd6>
			if(!is_button_pressed(BUTTON1)) buttonStates[BUTTON1] = BUTTON_RELEASED;
 80001ec:	2000      	movs	r0, #0
 80001ee:	f000 f9cd 	bl	800058c <is_button_pressed>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d103      	bne.n	8000200 <fsm_for_BUTTON1+0x78>
 80001f8:	4b1c      	ldr	r3, [pc, #112]	; (800026c <fsm_for_BUTTON1+0xe4>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]
			break;
 80001fe:	e030      	b.n	8000262 <fsm_for_BUTTON1+0xda>
				if(is_button_press_1s(BUTTON1)){
 8000200:	2000      	movs	r0, #0
 8000202:	f000 f9dd 	bl	80005c0 <is_button_press_1s>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d02a      	beq.n	8000262 <fsm_for_BUTTON1+0xda>
					buttonStates[BUTTON1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <fsm_for_BUTTON1+0xe4>)
 800020e:	2202      	movs	r2, #2
 8000210:	701a      	strb	r2, [r3, #0]
			break;
 8000212:	e026      	b.n	8000262 <fsm_for_BUTTON1+0xda>
			mode++;
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	b2da      	uxtb	r2, r3
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 800021e:	701a      	strb	r2, [r3, #0]
			DURATION = 1;
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <fsm_for_BUTTON1+0xec>)
 8000222:	2201      	movs	r2, #1
 8000224:	801a      	strh	r2, [r3, #0]
			if(mode > 4) {mode = 1;clearAllLEDs();}
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b04      	cmp	r3, #4
 800022c:	d904      	bls.n	8000238 <fsm_for_BUTTON1+0xb0>
 800022e:	4b10      	ldr	r3, [pc, #64]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 8000230:	2201      	movs	r2, #1
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	f000 fa46 	bl	80006c4 <clearAllLEDs>
			updateClockBuffer(mode,DURATION);
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <fsm_for_BUTTON1+0xe8>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	461a      	mov	r2, r3
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <fsm_for_BUTTON1+0xec>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	4619      	mov	r1, r3
 8000244:	4610      	mov	r0, r2
 8000246:	f000 fdc7 	bl	8000dd8 <updateClockBuffer>
			if(!is_button_pressed(BUTTON1)){
 800024a:	2000      	movs	r0, #0
 800024c:	f000 f99e 	bl	800058c <is_button_pressed>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d107      	bne.n	8000266 <fsm_for_BUTTON1+0xde>
				buttonStates[BUTTON1] = BUTTON_RELEASED;
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <fsm_for_BUTTON1+0xe4>)
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
			break;
 800025c:	e003      	b.n	8000266 <fsm_for_BUTTON1+0xde>
			break;
 800025e:	bf00      	nop
 8000260:	e002      	b.n	8000268 <fsm_for_BUTTON1+0xe0>
			break;
 8000262:	bf00      	nop
 8000264:	e000      	b.n	8000268 <fsm_for_BUTTON1+0xe0>
			break;
 8000266:	bf00      	nop
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200000a0 	.word	0x200000a0
 8000270:	20000000 	.word	0x20000000
 8000274:	20000002 	.word	0x20000002

08000278 <fsm_for_BUTTON2>:
//increase

void fsm_for_BUTTON2(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

	switch(buttonStates[BUTTON2]){
 800027c:	4b39      	ldr	r3, [pc, #228]	; (8000364 <fsm_for_BUTTON2+0xec>)
 800027e:	785b      	ldrb	r3, [r3, #1]
 8000280:	2b02      	cmp	r3, #2
 8000282:	d041      	beq.n	8000308 <fsm_for_BUTTON2+0x90>
 8000284:	2b02      	cmp	r3, #2
 8000286:	dc6b      	bgt.n	8000360 <fsm_for_BUTTON2+0xe8>
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <fsm_for_BUTTON2+0x1a>
 800028c:	2b01      	cmp	r3, #1
 800028e:	d027      	beq.n	80002e0 <fsm_for_BUTTON2+0x68>
					buttonStates[BUTTON2] = BUTTON_RELEASED;
				}
				break;
		}

}
 8000290:	e066      	b.n	8000360 <fsm_for_BUTTON2+0xe8>
				if(is_button_pressed(BUTTON2)){
 8000292:	2001      	movs	r0, #1
 8000294:	f000 f97a 	bl	800058c <is_button_pressed>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d05b      	beq.n	8000356 <fsm_for_BUTTON2+0xde>
					DURATION++;
 800029e:	4b32      	ldr	r3, [pc, #200]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	3301      	adds	r3, #1
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	4b30      	ldr	r3, [pc, #192]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 80002a8:	801a      	strh	r2, [r3, #0]
					if(DURATION > 99) DURATION = 1;
 80002aa:	4b2f      	ldr	r3, [pc, #188]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	2b63      	cmp	r3, #99	; 0x63
 80002b0:	d902      	bls.n	80002b8 <fsm_for_BUTTON2+0x40>
 80002b2:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	801a      	strh	r2, [r3, #0]
					if(DURATION < 1) DURATION = 99;
 80002b8:	4b2b      	ldr	r3, [pc, #172]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d102      	bne.n	80002c6 <fsm_for_BUTTON2+0x4e>
 80002c0:	4b29      	ldr	r3, [pc, #164]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 80002c2:	2263      	movs	r2, #99	; 0x63
 80002c4:	801a      	strh	r2, [r3, #0]
					updateClockBuffer(mode,DURATION);
 80002c6:	4b29      	ldr	r3, [pc, #164]	; (800036c <fsm_for_BUTTON2+0xf4>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b26      	ldr	r3, [pc, #152]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	4619      	mov	r1, r3
 80002d2:	4610      	mov	r0, r2
 80002d4:	f000 fd80 	bl	8000dd8 <updateClockBuffer>
					buttonStates[BUTTON2] = BUTTON_PRESSED;
 80002d8:	4b22      	ldr	r3, [pc, #136]	; (8000364 <fsm_for_BUTTON2+0xec>)
 80002da:	2201      	movs	r2, #1
 80002dc:	705a      	strb	r2, [r3, #1]
				break;
 80002de:	e03a      	b.n	8000356 <fsm_for_BUTTON2+0xde>
				if(!is_button_pressed(BUTTON2)) buttonStates[BUTTON2] = BUTTON_RELEASED;
 80002e0:	2001      	movs	r0, #1
 80002e2:	f000 f953 	bl	800058c <is_button_pressed>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d103      	bne.n	80002f4 <fsm_for_BUTTON2+0x7c>
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <fsm_for_BUTTON2+0xec>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	705a      	strb	r2, [r3, #1]
				break;
 80002f2:	e032      	b.n	800035a <fsm_for_BUTTON2+0xe2>
					if(is_button_press_1s(BUTTON2)){
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 f963 	bl	80005c0 <is_button_press_1s>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d02c      	beq.n	800035a <fsm_for_BUTTON2+0xe2>
						buttonStates[BUTTON2] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <fsm_for_BUTTON2+0xec>)
 8000302:	2202      	movs	r2, #2
 8000304:	705a      	strb	r2, [r3, #1]
				break;
 8000306:	e028      	b.n	800035a <fsm_for_BUTTON2+0xe2>
				DURATION++;
 8000308:	4b17      	ldr	r3, [pc, #92]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	b29a      	uxth	r2, r3
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 8000312:	801a      	strh	r2, [r3, #0]
				if(DURATION > 99) DURATION = 1;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	2b63      	cmp	r3, #99	; 0x63
 800031a:	d902      	bls.n	8000322 <fsm_for_BUTTON2+0xaa>
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 800031e:	2201      	movs	r2, #1
 8000320:	801a      	strh	r2, [r3, #0]
				if(DURATION < 1) DURATION = 99;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d102      	bne.n	8000330 <fsm_for_BUTTON2+0xb8>
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 800032c:	2263      	movs	r2, #99	; 0x63
 800032e:	801a      	strh	r2, [r3, #0]
				updateClockBuffer(mode,DURATION);
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <fsm_for_BUTTON2+0xf4>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <fsm_for_BUTTON2+0xf0>)
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	4619      	mov	r1, r3
 800033c:	4610      	mov	r0, r2
 800033e:	f000 fd4b 	bl	8000dd8 <updateClockBuffer>
				if(!is_button_pressed(BUTTON2)){
 8000342:	2001      	movs	r0, #1
 8000344:	f000 f922 	bl	800058c <is_button_pressed>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d107      	bne.n	800035e <fsm_for_BUTTON2+0xe6>
					buttonStates[BUTTON2] = BUTTON_RELEASED;
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <fsm_for_BUTTON2+0xec>)
 8000350:	2200      	movs	r2, #0
 8000352:	705a      	strb	r2, [r3, #1]
				break;
 8000354:	e003      	b.n	800035e <fsm_for_BUTTON2+0xe6>
				break;
 8000356:	bf00      	nop
 8000358:	e002      	b.n	8000360 <fsm_for_BUTTON2+0xe8>
				break;
 800035a:	bf00      	nop
 800035c:	e000      	b.n	8000360 <fsm_for_BUTTON2+0xe8>
				break;
 800035e:	bf00      	nop
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000a0 	.word	0x200000a0
 8000368:	20000002 	.word	0x20000002
 800036c:	20000000 	.word	0x20000000

08000370 <fsm_for_BUTTON3>:
void fsm_for_BUTTON3(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

	switch(buttonStates[BUTTON3]){
 8000374:	4b39      	ldr	r3, [pc, #228]	; (800045c <fsm_for_BUTTON3+0xec>)
 8000376:	789b      	ldrb	r3, [r3, #2]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d041      	beq.n	8000400 <fsm_for_BUTTON3+0x90>
 800037c:	2b02      	cmp	r3, #2
 800037e:	dc6b      	bgt.n	8000458 <fsm_for_BUTTON3+0xe8>
 8000380:	2b00      	cmp	r3, #0
 8000382:	d002      	beq.n	800038a <fsm_for_BUTTON3+0x1a>
 8000384:	2b01      	cmp	r3, #1
 8000386:	d027      	beq.n	80003d8 <fsm_for_BUTTON3+0x68>
					buttonStates[BUTTON3] = BUTTON_RELEASED;
				}
				break;
		}

}
 8000388:	e066      	b.n	8000458 <fsm_for_BUTTON3+0xe8>
				if(is_button_pressed(BUTTON3)){
 800038a:	2002      	movs	r0, #2
 800038c:	f000 f8fe 	bl	800058c <is_button_pressed>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d05b      	beq.n	800044e <fsm_for_BUTTON3+0xde>
					DURATION--;
 8000396:	4b32      	ldr	r3, [pc, #200]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	b29a      	uxth	r2, r3
 800039e:	4b30      	ldr	r3, [pc, #192]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 80003a0:	801a      	strh	r2, [r3, #0]
					if(DURATION > 99) DURATION = 1;
 80003a2:	4b2f      	ldr	r3, [pc, #188]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	2b63      	cmp	r3, #99	; 0x63
 80003a8:	d902      	bls.n	80003b0 <fsm_for_BUTTON3+0x40>
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	801a      	strh	r2, [r3, #0]
					if(DURATION < 1) DURATION = 99;
 80003b0:	4b2b      	ldr	r3, [pc, #172]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <fsm_for_BUTTON3+0x4e>
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 80003ba:	2263      	movs	r2, #99	; 0x63
 80003bc:	801a      	strh	r2, [r3, #0]
					updateClockBuffer(mode,DURATION);
 80003be:	4b29      	ldr	r3, [pc, #164]	; (8000464 <fsm_for_BUTTON3+0xf4>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	4619      	mov	r1, r3
 80003ca:	4610      	mov	r0, r2
 80003cc:	f000 fd04 	bl	8000dd8 <updateClockBuffer>
					buttonStates[BUTTON3] = BUTTON_PRESSED;
 80003d0:	4b22      	ldr	r3, [pc, #136]	; (800045c <fsm_for_BUTTON3+0xec>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	709a      	strb	r2, [r3, #2]
				break;
 80003d6:	e03a      	b.n	800044e <fsm_for_BUTTON3+0xde>
				if(!is_button_pressed(BUTTON3)) buttonStates[BUTTON3] = BUTTON_RELEASED;
 80003d8:	2002      	movs	r0, #2
 80003da:	f000 f8d7 	bl	800058c <is_button_pressed>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d103      	bne.n	80003ec <fsm_for_BUTTON3+0x7c>
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <fsm_for_BUTTON3+0xec>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	709a      	strb	r2, [r3, #2]
				break;
 80003ea:	e032      	b.n	8000452 <fsm_for_BUTTON3+0xe2>
					if(is_button_press_1s(BUTTON3)){
 80003ec:	2002      	movs	r0, #2
 80003ee:	f000 f8e7 	bl	80005c0 <is_button_press_1s>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d02c      	beq.n	8000452 <fsm_for_BUTTON3+0xe2>
						buttonStates[BUTTON3] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <fsm_for_BUTTON3+0xec>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	709a      	strb	r2, [r3, #2]
				break;
 80003fe:	e028      	b.n	8000452 <fsm_for_BUTTON3+0xe2>
				DURATION--;
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	3b01      	subs	r3, #1
 8000406:	b29a      	uxth	r2, r3
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 800040a:	801a      	strh	r2, [r3, #0]
				if(DURATION > 99) DURATION = 1;
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	2b63      	cmp	r3, #99	; 0x63
 8000412:	d902      	bls.n	800041a <fsm_for_BUTTON3+0xaa>
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 8000416:	2201      	movs	r2, #1
 8000418:	801a      	strh	r2, [r3, #0]
				if(DURATION < 1) DURATION = 99;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d102      	bne.n	8000428 <fsm_for_BUTTON3+0xb8>
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 8000424:	2263      	movs	r2, #99	; 0x63
 8000426:	801a      	strh	r2, [r3, #0]
				updateClockBuffer(mode,DURATION);
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <fsm_for_BUTTON3+0xf4>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <fsm_for_BUTTON3+0xf0>)
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	4619      	mov	r1, r3
 8000434:	4610      	mov	r0, r2
 8000436:	f000 fccf 	bl	8000dd8 <updateClockBuffer>
				if(!is_button_pressed(BUTTON3)){
 800043a:	2002      	movs	r0, #2
 800043c:	f000 f8a6 	bl	800058c <is_button_pressed>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d107      	bne.n	8000456 <fsm_for_BUTTON3+0xe6>
					buttonStates[BUTTON3] = BUTTON_RELEASED;
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <fsm_for_BUTTON3+0xec>)
 8000448:	2200      	movs	r2, #0
 800044a:	709a      	strb	r2, [r3, #2]
				break;
 800044c:	e003      	b.n	8000456 <fsm_for_BUTTON3+0xe6>
				break;
 800044e:	bf00      	nop
 8000450:	e002      	b.n	8000458 <fsm_for_BUTTON3+0xe8>
				break;
 8000452:	bf00      	nop
 8000454:	e000      	b.n	8000458 <fsm_for_BUTTON3+0xe8>
				break;
 8000456:	bf00      	nop
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000a0 	.word	0x200000a0
 8000460:	20000002 	.word	0x20000002
 8000464:	20000000 	.word	0x20000000

08000468 <fsm_for_BUTTON4>:

void fsm_for_BUTTON4(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

	switch(buttonStates[BUTTON4]){
 800046c:	4b3f      	ldr	r3, [pc, #252]	; (800056c <fsm_for_BUTTON4+0x104>)
 800046e:	78db      	ldrb	r3, [r3, #3]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d069      	beq.n	8000548 <fsm_for_BUTTON4+0xe0>
 8000474:	2b02      	cmp	r3, #2
 8000476:	dc76      	bgt.n	8000566 <fsm_for_BUTTON4+0xfe>
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <fsm_for_BUTTON4+0x1a>
 800047c:	2b01      	cmp	r3, #1
 800047e:	d04f      	beq.n	8000520 <fsm_for_BUTTON4+0xb8>
					buttonStates[BUTTON4] = BUTTON_RELEASED;
				}
				break;
		}

}
 8000480:	e071      	b.n	8000566 <fsm_for_BUTTON4+0xfe>
				if(is_button_pressed(BUTTON4)){
 8000482:	2003      	movs	r0, #3
 8000484:	f000 f882 	bl	800058c <is_button_pressed>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d066      	beq.n	800055c <fsm_for_BUTTON4+0xf4>
					if (mode == 2) setRedDuration((DURATION*S_TO_MS)/TIMER_CYCLE);
 800048e:	4b38      	ldr	r3, [pc, #224]	; (8000570 <fsm_for_BUTTON4+0x108>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d10e      	bne.n	80004b4 <fsm_for_BUTTON4+0x4c>
 8000496:	4b37      	ldr	r3, [pc, #220]	; (8000574 <fsm_for_BUTTON4+0x10c>)
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	461a      	mov	r2, r3
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	4413      	add	r3, r2
 80004a0:	461a      	mov	r2, r3
 80004a2:	0091      	lsls	r1, r2, #2
 80004a4:	461a      	mov	r2, r3
 80004a6:	460b      	mov	r3, r1
 80004a8:	4413      	add	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f932 	bl	8000718 <setRedDuration>
					if (mode == 3) setYellowDuration((DURATION*S_TO_MS)/TIMER_CYCLE);
 80004b4:	4b2e      	ldr	r3, [pc, #184]	; (8000570 <fsm_for_BUTTON4+0x108>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d10e      	bne.n	80004da <fsm_for_BUTTON4+0x72>
 80004bc:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <fsm_for_BUTTON4+0x10c>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	0092      	lsls	r2, r2, #2
 80004c4:	4413      	add	r3, r2
 80004c6:	461a      	mov	r2, r3
 80004c8:	0091      	lsls	r1, r2, #2
 80004ca:	461a      	mov	r2, r3
 80004cc:	460b      	mov	r3, r1
 80004ce:	4413      	add	r3, r2
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f92f 	bl	8000738 <setYellowDuration>
					if (mode == 4) setGreenDuration(((DURATION*S_TO_MS)/TIMER_CYCLE));
 80004da:	4b25      	ldr	r3, [pc, #148]	; (8000570 <fsm_for_BUTTON4+0x108>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b04      	cmp	r3, #4
 80004e0:	d10e      	bne.n	8000500 <fsm_for_BUTTON4+0x98>
 80004e2:	4b24      	ldr	r3, [pc, #144]	; (8000574 <fsm_for_BUTTON4+0x10c>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	461a      	mov	r2, r3
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	0091      	lsls	r1, r2, #2
 80004f0:	461a      	mov	r2, r3
 80004f2:	460b      	mov	r3, r1
 80004f4:	4413      	add	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f92c 	bl	8000758 <setGreenDuration>
					DURATION = 1;
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <fsm_for_BUTTON4+0x10c>)
 8000502:	2201      	movs	r2, #1
 8000504:	801a      	strh	r2, [r3, #0]
					updateClockBuffer(mode,DURATION);
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <fsm_for_BUTTON4+0x108>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	461a      	mov	r2, r3
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <fsm_for_BUTTON4+0x10c>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	4610      	mov	r0, r2
 8000514:	f000 fc60 	bl	8000dd8 <updateClockBuffer>
					buttonStates[BUTTON4] = BUTTON_PRESSED;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <fsm_for_BUTTON4+0x104>)
 800051a:	2201      	movs	r2, #1
 800051c:	70da      	strb	r2, [r3, #3]
				break;
 800051e:	e01d      	b.n	800055c <fsm_for_BUTTON4+0xf4>
				if(!is_button_pressed(BUTTON4)) buttonStates[BUTTON4] = BUTTON_RELEASED;
 8000520:	2003      	movs	r0, #3
 8000522:	f000 f833 	bl	800058c <is_button_pressed>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d103      	bne.n	8000534 <fsm_for_BUTTON4+0xcc>
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <fsm_for_BUTTON4+0x104>)
 800052e:	2200      	movs	r2, #0
 8000530:	70da      	strb	r2, [r3, #3]
				break;
 8000532:	e015      	b.n	8000560 <fsm_for_BUTTON4+0xf8>
					if(is_button_press_1s(BUTTON4)){
 8000534:	2003      	movs	r0, #3
 8000536:	f000 f843 	bl	80005c0 <is_button_press_1s>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00f      	beq.n	8000560 <fsm_for_BUTTON4+0xf8>
						buttonStates[BUTTON4] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <fsm_for_BUTTON4+0x104>)
 8000542:	2202      	movs	r2, #2
 8000544:	70da      	strb	r2, [r3, #3]
				break;
 8000546:	e00b      	b.n	8000560 <fsm_for_BUTTON4+0xf8>
				if(!is_button_pressed(BUTTON4)){
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f81f 	bl	800058c <is_button_pressed>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d107      	bne.n	8000564 <fsm_for_BUTTON4+0xfc>
					buttonStates[BUTTON4] = BUTTON_RELEASED;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <fsm_for_BUTTON4+0x104>)
 8000556:	2200      	movs	r2, #0
 8000558:	70da      	strb	r2, [r3, #3]
				break;
 800055a:	e003      	b.n	8000564 <fsm_for_BUTTON4+0xfc>
				break;
 800055c:	bf00      	nop
 800055e:	e002      	b.n	8000566 <fsm_for_BUTTON4+0xfe>
				break;
 8000560:	bf00      	nop
 8000562:	e000      	b.n	8000566 <fsm_for_BUTTON4+0xfe>
				break;
 8000564:	bf00      	nop
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000a0 	.word	0x200000a0
 8000570:	20000000 	.word	0x20000000
 8000574:	20000002 	.word	0x20000002

08000578 <current_mode>:
uint8_t current_mode(void ){
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	return mode;
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <current_mode+0x10>)
 800057e:	781b      	ldrb	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	20000000 	.word	0x20000000

0800058c <is_button_pressed>:
		BUTTON2_Pin,
		BUTTON3_Pin,
		BUTTON4_Pin
};

unsigned char is_button_pressed(uint8_t index){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_BUTTON) return 0;
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d901      	bls.n	80005a0 <is_button_pressed+0x14>
 800059c:	2300      	movs	r3, #0
 800059e:	e007      	b.n	80005b0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	4a06      	ldr	r2, [pc, #24]	; (80005bc <is_button_pressed+0x30>)
 80005a4:	5cd3      	ldrb	r3, [r2, r3]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf0c      	ite	eq
 80005aa:	2301      	moveq	r3, #1
 80005ac:	2300      	movne	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000004 	.word	0x20000004

080005c0 <is_button_press_1s>:
unsigned char is_button_press_1s(unsigned char index){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_BUTTON) return 0xff;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d901      	bls.n	80005d4 <is_button_press_1s+0x14>
 80005d0:	23ff      	movs	r3, #255	; 0xff
 80005d2:	e007      	b.n	80005e4 <is_button_press_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <is_button_press_1s+0x30>)
 80005d8:	5cd3      	ldrb	r3, [r2, r3]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	bf0c      	ite	eq
 80005de:	2301      	moveq	r3, #1
 80005e0:	2300      	movne	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000ac 	.word	0x200000ac

080005f4 <button_reading>:
//read all buttons available and debouncing. the program reads all buttons
//two consecutive times and compare the values.
//If the values are the same, update the value to buttonBuffer.
void button_reading(void){
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NUMBER_OF_BUTTON; i++){
 80005fa:	2300      	movs	r3, #0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e04a      	b.n	8000696 <button_reading+0xa2>
		//read pin, check for bounce
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4928      	ldr	r1, [pc, #160]	; (80006a8 <button_reading+0xb4>)
 8000606:	5c89      	ldrb	r1, [r1, r2]
 8000608:	4a28      	ldr	r2, [pc, #160]	; (80006ac <button_reading+0xb8>)
 800060a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(ButtonPort[i], ButtonPin[i]);
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <button_reading+0xbc>)
 8000610:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4927      	ldr	r1, [pc, #156]	; (80006b4 <button_reading+0xc0>)
 8000618:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800061c:	79fc      	ldrb	r4, [r7, #7]
 800061e:	4619      	mov	r1, r3
 8000620:	4610      	mov	r0, r2
 8000622:	f001 f8db 	bl	80017dc <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <button_reading+0xb4>)
 800062c:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <button_reading+0xb4>)
 8000632:	5cd2      	ldrb	r2, [r2, r3]
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	491d      	ldr	r1, [pc, #116]	; (80006ac <button_reading+0xb8>)
 8000638:	5ccb      	ldrb	r3, [r1, r3]
 800063a:	429a      	cmp	r2, r3
 800063c:	d128      	bne.n	8000690 <button_reading+0x9c>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	4919      	ldr	r1, [pc, #100]	; (80006a8 <button_reading+0xb4>)
 8000644:	5c89      	ldrb	r1, [r1, r2]
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <button_reading+0xc4>)
 8000648:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4a1a      	ldr	r2, [pc, #104]	; (80006b8 <button_reading+0xc4>)
 800064e:	5cd3      	ldrb	r3, [r2, r3]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d114      	bne.n	800067e <button_reading+0x8a>
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4a19      	ldr	r2, [pc, #100]	; (80006bc <button_reading+0xc8>)
 8000658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065c:	2b63      	cmp	r3, #99	; 0x63
 800065e:	d809      	bhi.n	8000674 <button_reading+0x80>
					counterForButtonPress1s[i]++;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <button_reading+0xc8>)
 8000664:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000668:	3201      	adds	r2, #1
 800066a:	b291      	uxth	r1, r2
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <button_reading+0xc8>)
 800066e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000672:	e00d      	b.n	8000690 <button_reading+0x9c>
				} else {
					flagForButtonPress1s[i] = 1;
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <button_reading+0xcc>)
 8000678:	2101      	movs	r1, #1
 800067a:	54d1      	strb	r1, [r2, r3]
 800067c:	e008      	b.n	8000690 <button_reading+0x9c>

				}

			} else {
				counterForButtonPress1s[i] = 0;
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <button_reading+0xc8>)
 8000682:	2100      	movs	r1, #0
 8000684:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <button_reading+0xcc>)
 800068c:	2100      	movs	r1, #0
 800068e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUMBER_OF_BUTTON; i++){
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	3301      	adds	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b03      	cmp	r3, #3
 800069a:	d9b1      	bls.n	8000600 <button_reading+0xc>
			}
		}
	}
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008
 80006ac:	2000000c 	.word	0x2000000c
 80006b0:	20000010 	.word	0x20000010
 80006b4:	20000020 	.word	0x20000020
 80006b8:	20000004 	.word	0x20000004
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	200000ac 	.word	0x200000ac

080006c4 <clearAllLEDs>:
#include "segment_display.h"
uint16_t redDuration = 		10;
uint16_t yellowDuration = 	10;
uint16_t greenDuration = 	10;

void clearAllLEDs(void ){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin , 1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <clearAllLEDs+0x50>)
 80006ce:	f001 f89c 	bl	800180a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin , 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d8:	480e      	ldr	r0, [pc, #56]	; (8000714 <clearAllLEDs+0x50>)
 80006da:	f001 f896 	bl	800180a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin , 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <clearAllLEDs+0x50>)
 80006e6:	f001 f890 	bl	800180a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin , 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <clearAllLEDs+0x50>)
 80006f2:	f001 f88a 	bl	800180a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin , 1);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <clearAllLEDs+0x50>)
 80006fe:	f001 f884 	bl	800180a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin , 1);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <clearAllLEDs+0x50>)
 800070a:	f001 f87e 	bl	800180a <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40010c00 	.word	0x40010c00

08000718 <setRedDuration>:
void setRedDuration(uint16_t red_duration){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	redDuration = red_duration;
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <setRedDuration+0x1c>)
 8000724:	88fb      	ldrh	r3, [r7, #6]
 8000726:	8013      	strh	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000028 	.word	0x20000028

08000738 <setYellowDuration>:
void setYellowDuration(uint16_t yellow_duration){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
	yellowDuration = yellow_duration;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <setYellowDuration+0x1c>)
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	8013      	strh	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	2000002a 	.word	0x2000002a

08000758 <setGreenDuration>:
void setGreenDuration(uint16_t green_duration){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
	greenDuration = green_duration;
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <setGreenDuration+0x1c>)
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	8013      	strh	r3, [r2, #0]

}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2000002c 	.word	0x2000002c

08000778 <displayLEDsys>:

//GREEN+YELLOW == RED
//RED > GREEN > YELLOW
void displayLEDsys(uint16_t timerLED){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
	//reached TimerLED, reset timer based on the lastest inputs
	 if(isTimerLED() == 1){
 8000782:	f000 fcad 	bl	80010e0 <isTimerLED>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d111      	bne.n	80007b0 <displayLEDsys+0x38>
		 		setTimerLED((redDuration*TIMER_CYCLE)+(yellowDuration*TIMER_CYCLE)+(greenDuration*TIMER_CYCLE));
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <displayLEDsys+0xfc>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <displayLEDsys+0x100>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a38      	ldr	r2, [pc, #224]	; (800087c <displayLEDsys+0x104>)
 800079a:	8812      	ldrh	r2, [r2, #0]
 800079c:	4413      	add	r3, r2
 800079e:	b29b      	uxth	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	0092      	lsls	r2, r2, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fc60 	bl	8001070 <setTimerLED>
	}
	 //display LED, if Duration is different from initial values, do the job
	if(current_mode() == 1 && redDuration !=10 && yellowDuration != 10 && greenDuration != 10){
 80007b0:	f7ff fee2 	bl	8000578 <current_mode>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d157      	bne.n	800086a <displayLEDsys+0xf2>
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <displayLEDsys+0xfc>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	2b0a      	cmp	r3, #10
 80007c0:	d053      	beq.n	800086a <displayLEDsys+0xf2>
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <displayLEDsys+0x100>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	2b0a      	cmp	r3, #10
 80007c8:	d04f      	beq.n	800086a <displayLEDsys+0xf2>
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <displayLEDsys+0x104>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b0a      	cmp	r3, #10
 80007d0:	d04b      	beq.n	800086a <displayLEDsys+0xf2>
		//first green burns out
		if(timerLED >= redDuration + yellowDuration){
 80007d2:	88fa      	ldrh	r2, [r7, #6]
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <displayLEDsys+0xfc>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <displayLEDsys+0x100>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	440b      	add	r3, r1
 80007e0:	429a      	cmp	r2, r3
 80007e2:	db0d      	blt.n	8000800 <displayLEDsys+0x88>
			clearAllLEDs();
 80007e4:	f7ff ff6e 	bl	80006c4 <clearAllLEDs>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4824      	ldr	r0, [pc, #144]	; (8000880 <displayLEDsys+0x108>)
 80007ee:	f001 f80c 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f8:	4821      	ldr	r0, [pc, #132]	; (8000880 <displayLEDsys+0x108>)
 80007fa:	f001 f806 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
		}
	}

}
 80007fe:	e034      	b.n	800086a <displayLEDsys+0xf2>
		} else if (timerLED >= redDuration){
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <displayLEDsys+0xfc>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	88fa      	ldrh	r2, [r7, #6]
 8000806:	429a      	cmp	r2, r3
 8000808:	d30d      	bcc.n	8000826 <displayLEDsys+0xae>
			clearAllLEDs();
 800080a:	f7ff ff5b 	bl	80006c4 <clearAllLEDs>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	481b      	ldr	r0, [pc, #108]	; (8000880 <displayLEDsys+0x108>)
 8000814:	f000 fff9 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	4818      	ldr	r0, [pc, #96]	; (8000880 <displayLEDsys+0x108>)
 8000820:	f000 fff3 	bl	800180a <HAL_GPIO_WritePin>
}
 8000824:	e021      	b.n	800086a <displayLEDsys+0xf2>
		} else if (timerLED >= yellowDuration){
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <displayLEDsys+0x100>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	88fa      	ldrh	r2, [r7, #6]
 800082c:	429a      	cmp	r2, r3
 800082e:	d30e      	bcc.n	800084e <displayLEDsys+0xd6>
			clearAllLEDs();
 8000830:	f7ff ff48 	bl	80006c4 <clearAllLEDs>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <displayLEDsys+0x108>)
 800083c:	f000 ffe5 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000846:	480e      	ldr	r0, [pc, #56]	; (8000880 <displayLEDsys+0x108>)
 8000848:	f000 ffdf 	bl	800180a <HAL_GPIO_WritePin>
}
 800084c:	e00d      	b.n	800086a <displayLEDsys+0xf2>
			clearAllLEDs();
 800084e:	f7ff ff39 	bl	80006c4 <clearAllLEDs>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <displayLEDsys+0x108>)
 800085a:	f000 ffd6 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <displayLEDsys+0x108>)
 8000866:	f000 ffd0 	bl	800180a <HAL_GPIO_WritePin>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000028 	.word	0x20000028
 8000878:	2000002a 	.word	0x2000002a
 800087c:	2000002c 	.word	0x2000002c
 8000880:	40010c00 	.word	0x40010c00

08000884 <blinkLED>:
void blinkLED(uint16_t DelayTimerForBlink){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]

	 if(isTimer1() == 1){
 800088e:	f000 fc75 	bl	800117c <isTimer1>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d135      	bne.n	8000904 <blinkLED+0x80>

			  if(current_mode() == 2){
 8000898:	f7ff fe6e 	bl	8000578 <current_mode>
 800089c:	4603      	mov	r3, r0
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d10a      	bne.n	80008b8 <blinkLED+0x34>
				  clearAllLEDs();
 80008a2:	f7ff ff0f 	bl	80006c4 <clearAllLEDs>
				  HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	4818      	ldr	r0, [pc, #96]	; (800090c <blinkLED+0x88>)
 80008aa:	f000 ffc6 	bl	800183a <HAL_GPIO_TogglePin>
				  HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80008ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <blinkLED+0x88>)
 80008b4:	f000 ffc1 	bl	800183a <HAL_GPIO_TogglePin>
			  }
			  if(current_mode() ==3){
 80008b8:	f7ff fe5e 	bl	8000578 <current_mode>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d10b      	bne.n	80008da <blinkLED+0x56>
				  clearAllLEDs();
 80008c2:	f7ff feff 	bl	80006c4 <clearAllLEDs>
				  HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80008c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ca:	4810      	ldr	r0, [pc, #64]	; (800090c <blinkLED+0x88>)
 80008cc:	f000 ffb5 	bl	800183a <HAL_GPIO_TogglePin>
				  HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80008d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <blinkLED+0x88>)
 80008d6:	f000 ffb0 	bl	800183a <HAL_GPIO_TogglePin>
			  }
			  if(current_mode() == 4){
 80008da:	f7ff fe4d 	bl	8000578 <current_mode>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d10b      	bne.n	80008fc <blinkLED+0x78>
				  clearAllLEDs();
 80008e4:	f7ff feee 	bl	80006c4 <clearAllLEDs>
				  HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <blinkLED+0x88>)
 80008ee:	f000 ffa4 	bl	800183a <HAL_GPIO_TogglePin>
				  HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80008f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <blinkLED+0x88>)
 80008f8:	f000 ff9f 	bl	800183a <HAL_GPIO_TogglePin>
			  }

			  setTimer1(DelayTimerForBlink);
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fc04 	bl	800110c <setTimer1>
		  }
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40010c00 	.word	0x40010c00

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fc77 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f83b 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800091e:	f000 f875 	bl	8000a0c <MX_TIM2_Init>
  MX_GPIO_Init();
 8000922:	f000 f8bf 	bl	8000aa4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2) ;
 8000926:	481a      	ldr	r0, [pc, #104]	; (8000990 <main+0x80>)
 8000928:	f001 fbd8 	bl	80020dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t DelayTimerForSegment = 1000;
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	80fb      	strh	r3, [r7, #6]
  uint16_t DelayTimerForBlink = 250;
 8000932:	23fa      	movs	r3, #250	; 0xfa
 8000934:	80bb      	strh	r3, [r7, #4]
  uint16_t InitDelayTimerForLEDSys = 1000;
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	807b      	strh	r3, [r7, #2]
  setTimer0( DelayTimerForSegment );
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fb40 	bl	8000fc4 <setTimer0>
  setTimer1(DelayTimerForBlink);
 8000944:	88bb      	ldrh	r3, [r7, #4]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fbe0 	bl	800110c <setTimer1>
  setTimerLED(InitDelayTimerForLEDSys);
 800094c:	887b      	ldrh	r3, [r7, #2]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fb8e 	bl	8001070 <setTimerLED>
 clear7SEG();
 8000954:	f000 fa24 	bl	8000da0 <clear7SEG>
 clearAllLEDs();
 8000958:	f7ff feb4 	bl	80006c4 <clearAllLEDs>
 buttonStatesInit();
 800095c:	f7ff fbf6 	bl	800014c <buttonStatesInit>
  while (1)
  {
    /* USER CODE END WHILE */

		  fsm_for_BUTTON1();
 8000960:	f7ff fc12 	bl	8000188 <fsm_for_BUTTON1>
		  fsm_for_BUTTON2();
 8000964:	f7ff fc88 	bl	8000278 <fsm_for_BUTTON2>
		  fsm_for_BUTTON3();
 8000968:	f7ff fd02 	bl	8000370 <fsm_for_BUTTON3>
		  fsm_for_BUTTON4();
 800096c:	f7ff fd7c 	bl	8000468 <fsm_for_BUTTON4>


		  if(current_mode() != 1) blinkLED(DelayTimerForBlink);
 8000970:	f7ff fe02 	bl	8000578 <current_mode>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d003      	beq.n	8000982 <main+0x72>
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff81 	bl	8000884 <blinkLED>
		  displaySegment(DelayTimerForSegment);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fb5f 	bl	8001048 <displaySegment>
		  displayLED();
 800098a:	f000 fbb3 	bl	80010f4 <displayLED>
		  fsm_for_BUTTON1();
 800098e:	e7e7      	b.n	8000960 <main+0x50>
 8000990:	200000c4 	.word	0x200000c4

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b090      	sub	sp, #64	; 0x40
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	2228      	movs	r2, #40	; 0x28
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 ff52 	bl	800284c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ba:	2301      	movs	r3, #1
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009be:	2310      	movs	r3, #16
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 ff4e 	bl	800186c <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009d6:	f000 f8bb 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f9ba 	bl	8001d6c <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009fe:	f000 f8a7 	bl	8000b50 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3740      	adds	r7, #64	; 0x40
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a32:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a40:	2209      	movs	r2, #9
 8000a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a52:	f001 faf3 	bl	800203c <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a5c:	f000 f878 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a6e:	f001 fc89 	bl	8002384 <HAL_TIM_ConfigClockSource>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a78:	f000 f86a 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a8a:	f001 fe51 	bl	8002730 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f85c 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000c4 	.word	0x200000c4

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_GPIO_Init+0xa0>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <MX_GPIO_Init+0xa0>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_GPIO_Init+0xa0>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_GPIO_Init+0xa0>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <MX_GPIO_Init+0xa0>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_GPIO_Init+0xa0>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
 8000aee:	4816      	ldr	r0, [pc, #88]	; (8000b48 <MX_GPIO_Init+0xa4>)
 8000af0:	f000 fe8b 	bl	800180a <HAL_GPIO_WritePin>
                          |BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|RED2_Pin
 8000af4:	2200      	movs	r2, #0
 8000af6:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000afa:	4814      	ldr	r0, [pc, #80]	; (8000b4c <MX_GPIO_Init+0xa8>)
 8000afc:	f000 fe85 	bl	800180a <HAL_GPIO_WritePin>
                          |SEG5_Pin|SEG6_Pin|RED1_Pin|YELLOW1_Pin
                          |GREEN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000b00:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8000b04:	60bb      	str	r3, [r7, #8]
                          |BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <MX_GPIO_Init+0xa4>)
 8000b1a:	f000 fce5 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin RED1_Pin YELLOW1_Pin
                           GREEN1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|RED2_Pin
 8000b1e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b22:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin|RED1_Pin|YELLOW1_Pin
                          |GREEN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_GPIO_Init+0xa8>)
 8000b38:	f000 fcd6 	bl	80014e8 <HAL_GPIO_Init>

}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	40010c00 	.word	0x40010c00

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <update_value_segment>:
static uint8_t segmentBuffer[NUMBER_OF_SEVEN_SEGMENTS];


//update segmentBuffer
uint8_t update_value_segment(uint8_t value, int idx)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
	 if(idx >= NUMBER_OF_SEVEN_SEGMENTS) return 0;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	dd01      	ble.n	8000b72 <update_value_segment+0x16>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e00a      	b.n	8000b88 <update_value_segment+0x2c>
	 if (value > NUMBER_OF_DECIMAL_DIGITS) return 0;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d901      	bls.n	8000b7c <update_value_segment+0x20>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e005      	b.n	8000b88 <update_value_segment+0x2c>
	 segmentBuffer[idx] = value;
 8000b7c:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <update_value_segment+0x38>)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	79fa      	ldrb	r2, [r7, #7]
 8000b84:	701a      	strb	r2, [r3, #0]
	 return 1;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200000b0 	.word	0x200000b0

08000b98 <display_segment_number>:
		SEG4_Pin,
		SEG5_Pin,
		SEG6_Pin
};
//get signals from segmentbuffer then writepin accordingly
void display_segment_number(int idx){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint8_t temp = sevenSegmentLEDConversion[segmentBuffer[idx]];
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <display_segment_number+0x78>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <display_segment_number+0x7c>)
 8000bac:	5c9b      	ldrb	r3, [r3, r2]
 8000bae:	73bb      	strb	r3, [r7, #14]
//		HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , 0);
//	} else{
//		HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , 1);
//	}
	uint8_t i;
	for(i = 0; i < NUMBER_OF_EDGES ; i++){
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e023      	b.n	8000bfe <display_segment_number+0x66>
		if((temp>>i) & 0x01){
 8000bb6:	7bba      	ldrb	r2, [r7, #14]
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	fa42 f303 	asr.w	r3, r2, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00c      	beq.n	8000be0 <display_segment_number+0x48>
			HAL_GPIO_WritePin(sevenSegmentDataPort[i], sevenSegmentDataPin[i], 0);
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <display_segment_number+0x80>)
 8000bca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <display_segment_number+0x84>)
 8000bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f000 fe16 	bl	800180a <HAL_GPIO_WritePin>
 8000bde:	e00b      	b.n	8000bf8 <display_segment_number+0x60>
		} else{
			HAL_GPIO_WritePin(sevenSegmentDataPort[i], sevenSegmentDataPin[i], 1);
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <display_segment_number+0x80>)
 8000be4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <display_segment_number+0x84>)
 8000bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f000 fe09 	bl	800180a <HAL_GPIO_WritePin>
	for(i = 0; i < NUMBER_OF_EDGES ; i++){
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	2b06      	cmp	r3, #6
 8000c02:	d9d8      	bls.n	8000bb6 <display_segment_number+0x1e>
		}
	}

}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000b0 	.word	0x200000b0
 8000c14:	20000030 	.word	0x20000030
 8000c18:	2000003c 	.word	0x2000003c
 8000c1c:	20000058 	.word	0x20000058

08000c20 <update7SEG>:
//THIS IS NOT THE ARRAY FOR DISPLAYING.
int led_buffer[4] = {0, 1, 0, 1};
int index_led = 0;
//update led_index and EN signals

void update7SEG(uint8_t index){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	switch(index){
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	f200 80ab 	bhi.w	8000d88 <update7SEG+0x168>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <update7SEG+0x18>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000c49 	.word	0x08000c49
 8000c3c:	08000c99 	.word	0x08000c99
 8000c40:	08000ce9 	.word	0x08000ce9
 8000c44:	08000d39 	.word	0x08000d39
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	4851      	ldr	r0, [pc, #324]	; (8000d94 <update7SEG+0x174>)
 8000c4e:	f000 fddc 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	484f      	ldr	r0, [pc, #316]	; (8000d94 <update7SEG+0x174>)
 8000c58:	f000 fdd7 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c62:	484c      	ldr	r0, [pc, #304]	; (8000d94 <update7SEG+0x174>)
 8000c64:	f000 fdd1 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6e:	4849      	ldr	r0, [pc, #292]	; (8000d94 <update7SEG+0x174>)
 8000c70:	f000 fdcb 	bl	800180a <HAL_GPIO_WritePin>
			update_value_segment(led_buffer[index], index);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a48      	ldr	r2, [pc, #288]	; (8000d98 <update7SEG+0x178>)
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff6a 	bl	8000b5c <update_value_segment>
			display_segment_number(index);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff84 	bl	8000b98 <display_segment_number>
			index_led = index;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4a42      	ldr	r2, [pc, #264]	; (8000d9c <update7SEG+0x17c>)
 8000c94:	6013      	str	r3, [r2, #0]
			break;
 8000c96:	e078      	b.n	8000d8a <update7SEG+0x16a>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	483d      	ldr	r0, [pc, #244]	; (8000d94 <update7SEG+0x174>)
 8000c9e:	f000 fdb4 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	483b      	ldr	r0, [pc, #236]	; (8000d94 <update7SEG+0x174>)
 8000ca8:	f000 fdaf 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb2:	4838      	ldr	r0, [pc, #224]	; (8000d94 <update7SEG+0x174>)
 8000cb4:	f000 fda9 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbe:	4835      	ldr	r0, [pc, #212]	; (8000d94 <update7SEG+0x174>)
 8000cc0:	f000 fda3 	bl	800180a <HAL_GPIO_WritePin>
			update_value_segment(led_buffer[index], index);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a34      	ldr	r2, [pc, #208]	; (8000d98 <update7SEG+0x178>)
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	79fa      	ldrb	r2, [r7, #7]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff42 	bl	8000b5c <update_value_segment>
			display_segment_number(index);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff5c 	bl	8000b98 <display_segment_number>
			index_led = index;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <update7SEG+0x17c>)
 8000ce4:	6013      	str	r3, [r2, #0]
			break;
 8000ce6:	e050      	b.n	8000d8a <update7SEG+0x16a>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	4829      	ldr	r0, [pc, #164]	; (8000d94 <update7SEG+0x174>)
 8000cee:	f000 fd8c 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4827      	ldr	r0, [pc, #156]	; (8000d94 <update7SEG+0x174>)
 8000cf8:	f000 fd87 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d02:	4824      	ldr	r0, [pc, #144]	; (8000d94 <update7SEG+0x174>)
 8000d04:	f000 fd81 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0e:	4821      	ldr	r0, [pc, #132]	; (8000d94 <update7SEG+0x174>)
 8000d10:	f000 fd7b 	bl	800180a <HAL_GPIO_WritePin>
			update_value_segment(led_buffer[index], index);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a20      	ldr	r2, [pc, #128]	; (8000d98 <update7SEG+0x178>)
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff1a 	bl	8000b5c <update_value_segment>
			display_segment_number(index);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff34 	bl	8000b98 <display_segment_number>
			index_led = index;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <update7SEG+0x17c>)
 8000d34:	6013      	str	r3, [r2, #0]
			break;
 8000d36:	e028      	b.n	8000d8a <update7SEG+0x16a>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	4815      	ldr	r0, [pc, #84]	; (8000d94 <update7SEG+0x174>)
 8000d3e:	f000 fd64 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4813      	ldr	r0, [pc, #76]	; (8000d94 <update7SEG+0x174>)
 8000d48:	f000 fd5f 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d52:	4810      	ldr	r0, [pc, #64]	; (8000d94 <update7SEG+0x174>)
 8000d54:	f000 fd59 	bl	800180a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <update7SEG+0x174>)
 8000d60:	f000 fd53 	bl	800180a <HAL_GPIO_WritePin>
			update_value_segment(led_buffer[index], index);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <update7SEG+0x178>)
 8000d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	79fa      	ldrb	r2, [r7, #7]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fef2 	bl	8000b5c <update_value_segment>
			display_segment_number(index);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff0c 	bl	8000b98 <display_segment_number>
			index_led = index;
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <update7SEG+0x17c>)
 8000d84:	6013      	str	r3, [r2, #0]
			break;
 8000d86:	e000      	b.n	8000d8a <update7SEG+0x16a>
		default:
			break;
 8000d88:	bf00      	nop
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010800 	.word	0x40010800
 8000d98:	20000068 	.word	0x20000068
 8000d9c:	200000b4 	.word	0x200000b4

08000da0 <clear7SEG>:
void clear7SEG(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2140      	movs	r1, #64	; 0x40
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <clear7SEG+0x34>)
 8000daa:	f000 fd2e 	bl	800180a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <clear7SEG+0x34>)
 8000db4:	f000 fd29 	bl	800180a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <clear7SEG+0x34>)
 8000dc0:	f000 fd23 	bl	800180a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dca:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <clear7SEG+0x34>)
 8000dcc:	f000 fd1d 	bl	800180a <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <updateClockBuffer>:

//update led_buffer
void updateClockBuffer(int mode, int led_duration){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	//havent found a better way to improve % and /
	if(mode < 5){
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	dc27      	bgt.n	8000e38 <updateClockBuffer+0x60>
		led_buffer[0]  = 0;
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <updateClockBuffer+0x6c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
		led_buffer[1]  = mode;
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <updateClockBuffer+0x6c>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6053      	str	r3, [r2, #4]
	} else{
		return;
	}
	if(led_duration < 10){
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b09      	cmp	r3, #9
 8000df8:	dc06      	bgt.n	8000e08 <updateClockBuffer+0x30>
		led_buffer[2]  = 0;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <updateClockBuffer+0x6c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
		led_buffer[3]  = led_duration;
 8000e00:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <updateClockBuffer+0x6c>)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	60d3      	str	r3, [r2, #12]
 8000e06:	e018      	b.n	8000e3a <updateClockBuffer+0x62>

	} else {
		led_buffer[2]  = led_duration/10;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <updateClockBuffer+0x70>)
 8000e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e10:	1092      	asrs	r2, r2, #2
 8000e12:	17db      	asrs	r3, r3, #31
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <updateClockBuffer+0x6c>)
 8000e18:	6093      	str	r3, [r2, #8]
		led_buffer[3]  = led_duration%10;
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <updateClockBuffer+0x70>)
 8000e1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e22:	109a      	asrs	r2, r3, #2
 8000e24:	17cb      	asrs	r3, r1, #31
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	1aca      	subs	r2, r1, r3
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <updateClockBuffer+0x6c>)
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	e000      	b.n	8000e3a <updateClockBuffer+0x62>
		return;
 8000e38:	bf00      	nop
	}


}
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000068 	.word	0x20000068
 8000e48:	66666667 	.word	0x66666667

08000e4c <displayClock>:


//update second, minute,hour
//based on timer2_counter, display the appropriate 7SEGs, 250ms for each 7SEG
void displayClock(int timer0_counter, uint16_t DelayTimerForSegment){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
	  if (isTimer0() == 1){
 8000e58:	f000 f8ec 	bl	8001034 <isTimer0>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d103      	bne.n	8000e6a <displayClock+0x1e>
			  setTimer0(DelayTimerForSegment);
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f8ad 	bl	8000fc4 <setTimer0>
		  }
  	   	  //each 7SEG is ON for 250ms
  	   	  if(timer0_counter > 75) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b4b      	cmp	r3, #75	; 0x4b
 8000e6e:	dd03      	ble.n	8000e78 <displayClock+0x2c>
  	   		  update7SEG(0);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fed5 	bl	8000c20 <update7SEG>
  	   	  }
  	   	  else if(timer0_counter > 0) {
  	   		  update7SEG(3);
  	   	  }

}
 8000e76:	e013      	b.n	8000ea0 <displayClock+0x54>
  	   	  else if(timer0_counter > 50){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b32      	cmp	r3, #50	; 0x32
 8000e7c:	dd03      	ble.n	8000e86 <displayClock+0x3a>
  	   		  update7SEG(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fece 	bl	8000c20 <update7SEG>
}
 8000e84:	e00c      	b.n	8000ea0 <displayClock+0x54>
  	   	  else if(timer0_counter > 25) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b19      	cmp	r3, #25
 8000e8a:	dd03      	ble.n	8000e94 <displayClock+0x48>
  	   		  update7SEG(2);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff fec7 	bl	8000c20 <update7SEG>
}
 8000e92:	e005      	b.n	8000ea0 <displayClock+0x54>
  	   	  else if(timer0_counter > 0) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dd02      	ble.n	8000ea0 <displayClock+0x54>
  	   		  update7SEG(3);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f7ff fec0 	bl	8000c20 <update7SEG>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6193      	str	r3, [r2, #24]
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_MspInit+0x60>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_MspInit+0x60>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1c:	d113      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	201c      	movs	r0, #28
 8000f3c:	f000 fa9d 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f40:	201c      	movs	r0, #28
 8000f42:	f000 fab6 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 f97b 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <TIM2_IRQHandler+0x10>)
 8000faa:	f001 f8e3 	bl	8002174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000c4 	.word	0x200000c4

08000fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <setTimer0>:
//timer 0 is for displaying segments

uint16_t timer0_counter = 0;
uint8_t timer0_flag = 0;

void setTimer0(uint16_t duration){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	timer0_counter = duration / TIMER_CYCLE;
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <setTimer0+0x2c>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	08db      	lsrs	r3, r3, #3
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <setTimer0+0x30>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	timer0_flag = 0;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <setTimer0+0x34>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	cccccccd 	.word	0xcccccccd
 8000ff4:	200000b8 	.word	0x200000b8
 8000ff8:	200000ba 	.word	0x200000ba

08000ffc <timer0_run>:
void timer0_run(){
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <timer0_run+0x30>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <timer0_run+0x26>
		timer0_counter--;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <timer0_run+0x30>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <timer0_run+0x30>)
 8001012:	801a      	strh	r2, [r3, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <timer0_run+0x30>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <timer0_run+0x26>
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <timer0_run+0x34>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
	}
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200000b8 	.word	0x200000b8
 8001030:	200000ba 	.word	0x200000ba

08001034 <isTimer0>:

uint8_t isTimer0(void ){
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	return timer0_flag;
 8001038:	4b02      	ldr	r3, [pc, #8]	; (8001044 <isTimer0+0x10>)
 800103a:	781b      	ldrb	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	200000ba 	.word	0x200000ba

08001048 <displaySegment>:

void displaySegment(uint16_t DelayTimerForSegment){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
	displayClock(timer0_counter,DelayTimerForSegment);
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <displaySegment+0x24>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f7ff fef5 	bl	8000e4c <displayClock>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000b8 	.word	0x200000b8

08001070 <setTimerLED>:


uint16_t timerLED_counter = 0;
uint8_t timerLED_flag = 0;

void setTimerLED(uint16_t duration){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
	timerLED_counter = duration/TIMER_CYCLE;
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <setTimerLED+0x2c>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <setTimerLED+0x30>)
 8001088:	801a      	strh	r2, [r3, #0]
	 timerLED_flag = 0;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <setTimerLED+0x34>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	cccccccd 	.word	0xcccccccd
 80010a0:	200000bc 	.word	0x200000bc
 80010a4:	200000be 	.word	0x200000be

080010a8 <timerLED_run>:

void timerLED_run(){
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	if(timerLED_counter > 0){
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <timerLED_run+0x30>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00c      	beq.n	80010ce <timerLED_run+0x26>
		timerLED_counter--;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <timerLED_run+0x30>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <timerLED_run+0x30>)
 80010be:	801a      	strh	r2, [r3, #0]
		if(timerLED_counter == 0){ timerLED_flag = 1;}
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <timerLED_run+0x30>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <timerLED_run+0x26>
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <timerLED_run+0x34>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
	}
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200000bc 	.word	0x200000bc
 80010dc:	200000be 	.word	0x200000be

080010e0 <isTimerLED>:

uint8_t isTimerLED(void){
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	return timerLED_flag;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <isTimerLED+0x10>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	200000be 	.word	0x200000be

080010f4 <displayLED>:

void displayLED(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	displayLEDsys(timerLED_counter);
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <displayLED+0x14>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fb3b 	bl	8000778 <displayLEDsys>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000bc 	.word	0x200000bc

0800110c <setTimer1>:
//************************************************************************
//timer for lED blinking
uint16_t timer1_counter = 0;
uint8_t timer1_flag = 0;

void setTimer1(uint16_t duration){
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
	timer1_counter = duration / TIMER_CYCLE;
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <setTimer1+0x2c>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <setTimer1+0x30>)
 8001124:	801a      	strh	r2, [r3, #0]
	timer1_flag = 0;
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <setTimer1+0x34>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	cccccccd 	.word	0xcccccccd
 800113c:	200000c0 	.word	0x200000c0
 8001140:	200000c2 	.word	0x200000c2

08001144 <timer1_run>:
void timer1_run(){
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <timer1_run+0x30>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <timer1_run+0x26>
		timer1_counter--;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <timer1_run+0x30>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <timer1_run+0x30>)
 800115a:	801a      	strh	r2, [r3, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <timer1_run+0x30>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <timer1_run+0x26>
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <timer1_run+0x34>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	}
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200000c0 	.word	0x200000c0
 8001178:	200000c2 	.word	0x200000c2

0800117c <isTimer1>:

uint8_t isTimer1(void ){
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	return timer1_flag;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <isTimer1+0x10>)
 8001182:	781b      	ldrb	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	200000c2 	.word	0x200000c2

08001190 <HAL_TIM_PeriodElapsedCallback>:



//***********************************************************************************
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a0:	d107      	bne.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x22>
		button_reading();
 80011a2:	f7ff fa27 	bl	80005f4 <button_reading>
		timer0_run();
 80011a6:	f7ff ff29 	bl	8000ffc <timer0_run>
		timerLED_run();
 80011aa:	f7ff ff7d 	bl	80010a8 <timerLED_run>
		timer1_run();
 80011ae:	f7ff ffc9 	bl	8001144 <timer1_run>
	}

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	; (80011f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	; (8001200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e2:	f7ff fee9 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f001 fb0d 	bl	8002804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ea:	f7ff fb91 	bl	8000910 <main>
  bx lr
 80011ee:	4770      	bx	lr
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80011f8:	0800289c 	.word	0x0800289c
  ldr r2, =_sbss
 80011fc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001200:	20000110 	.word	0x20000110

08001204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC1_2_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x28>)
 8001212:	f043 0310 	orr.w	r3, r3, #16
 8001216:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f923 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fe40 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f93b 	bl	80014ce <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f903 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000078 	.word	0x20000078
 800128c:	20000080 	.word	0x20000080
 8001290:	2000007c 	.word	0x2000007c

08001294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_IncTick+0x1c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_IncTick+0x20>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <HAL_IncTick+0x20>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000080 	.word	0x20000080
 80012b4:	2000010c 	.word	0x2000010c

080012b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <HAL_GetTick+0x10>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	2000010c 	.word	0x2000010c

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4906      	ldr	r1, [pc, #24]	; (8001364 <__NVIC_EnableIRQ+0x34>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff90 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff2d 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff42 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff35 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b08b      	sub	sp, #44	; 0x2c
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	e148      	b.n	800178e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014fc:	2201      	movs	r2, #1
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 8137 	bne.w	8001788 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4aa3      	ldr	r2, [pc, #652]	; (80017ac <HAL_GPIO_Init+0x2c4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d05e      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001524:	4aa1      	ldr	r2, [pc, #644]	; (80017ac <HAL_GPIO_Init+0x2c4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d875      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800152a:	4aa1      	ldr	r2, [pc, #644]	; (80017b0 <HAL_GPIO_Init+0x2c8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d058      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001530:	4a9f      	ldr	r2, [pc, #636]	; (80017b0 <HAL_GPIO_Init+0x2c8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d86f      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001536:	4a9f      	ldr	r2, [pc, #636]	; (80017b4 <HAL_GPIO_Init+0x2cc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d052      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 800153c:	4a9d      	ldr	r2, [pc, #628]	; (80017b4 <HAL_GPIO_Init+0x2cc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d869      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001542:	4a9d      	ldr	r2, [pc, #628]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d04c      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001548:	4a9b      	ldr	r2, [pc, #620]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d863      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800154e:	4a9b      	ldr	r2, [pc, #620]	; (80017bc <HAL_GPIO_Init+0x2d4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d046      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001554:	4a99      	ldr	r2, [pc, #612]	; (80017bc <HAL_GPIO_Init+0x2d4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d85d      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800155a:	2b12      	cmp	r3, #18
 800155c:	d82a      	bhi.n	80015b4 <HAL_GPIO_Init+0xcc>
 800155e:	2b12      	cmp	r3, #18
 8001560:	d859      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001562:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <HAL_GPIO_Init+0x80>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	080015e3 	.word	0x080015e3
 800156c:	080015bd 	.word	0x080015bd
 8001570:	080015cf 	.word	0x080015cf
 8001574:	08001611 	.word	0x08001611
 8001578:	08001617 	.word	0x08001617
 800157c:	08001617 	.word	0x08001617
 8001580:	08001617 	.word	0x08001617
 8001584:	08001617 	.word	0x08001617
 8001588:	08001617 	.word	0x08001617
 800158c:	08001617 	.word	0x08001617
 8001590:	08001617 	.word	0x08001617
 8001594:	08001617 	.word	0x08001617
 8001598:	08001617 	.word	0x08001617
 800159c:	08001617 	.word	0x08001617
 80015a0:	08001617 	.word	0x08001617
 80015a4:	08001617 	.word	0x08001617
 80015a8:	08001617 	.word	0x08001617
 80015ac:	080015c5 	.word	0x080015c5
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	4a82      	ldr	r2, [pc, #520]	; (80017c0 <HAL_GPIO_Init+0x2d8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ba:	e02c      	b.n	8001616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e029      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	3304      	adds	r3, #4
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e024      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	3308      	adds	r3, #8
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e01f      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	330c      	adds	r3, #12
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e01a      	b.n	8001618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ea:	2304      	movs	r3, #4
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e013      	b.n	8001618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f8:	2308      	movs	r3, #8
 80015fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	611a      	str	r2, [r3, #16]
          break;
 8001602:	e009      	b.n	8001618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	615a      	str	r2, [r3, #20]
          break;
 800160e:	e003      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x130>
          break;
 8001616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2bff      	cmp	r3, #255	; 0xff
 800161c:	d801      	bhi.n	8001622 <HAL_GPIO_Init+0x13a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_Init+0x13e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3304      	adds	r3, #4
 8001626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2bff      	cmp	r3, #255	; 0xff
 800162c:	d802      	bhi.n	8001634 <HAL_GPIO_Init+0x14c>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x152>
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	3b08      	subs	r3, #8
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	210f      	movs	r1, #15
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	6a39      	ldr	r1, [r7, #32]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8090 	beq.w	8001788 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001668:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_GPIO_Init+0x2dc>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a55      	ldr	r2, [pc, #340]	; (80017c4 <HAL_GPIO_Init+0x2dc>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_GPIO_Init+0x2dc>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001680:	4a51      	ldr	r2, [pc, #324]	; (80017c8 <HAL_GPIO_Init+0x2e0>)
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a49      	ldr	r2, [pc, #292]	; (80017cc <HAL_GPIO_Init+0x2e4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00d      	beq.n	80016c8 <HAL_GPIO_Init+0x1e0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <HAL_GPIO_Init+0x2e8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0x1dc>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_GPIO_Init+0x2ec>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_Init+0x1d8>
 80016bc:	2302      	movs	r3, #2
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x1e2>
 80016c0:	2303      	movs	r3, #3
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x1e2>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x1e2>
 80016c8:	2300      	movs	r3, #0
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016da:	493b      	ldr	r1, [pc, #236]	; (80017c8 <HAL_GPIO_Init+0x2e0>)
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4937      	ldr	r1, [pc, #220]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001702:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	4933      	ldr	r1, [pc, #204]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 800170c:	4013      	ands	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	492d      	ldr	r1, [pc, #180]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	4929      	ldr	r1, [pc, #164]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	4923      	ldr	r1, [pc, #140]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	43db      	mvns	r3, r3
 800175a:	491f      	ldr	r1, [pc, #124]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 800175c:	4013      	ands	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	4919      	ldr	r1, [pc, #100]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	43db      	mvns	r3, r3
 8001782:	4915      	ldr	r1, [pc, #84]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 8001784:	4013      	ands	r3, r2
 8001786:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3301      	adds	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f aeaf 	bne.w	80014fc <HAL_GPIO_Init+0x14>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	372c      	adds	r7, #44	; 0x2c
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	10320000 	.word	0x10320000
 80017b0:	10310000 	.word	0x10310000
 80017b4:	10220000 	.word	0x10220000
 80017b8:	10210000 	.word	0x10210000
 80017bc:	10120000 	.word	0x10120000
 80017c0:	10110000 	.word	0x10110000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40010800 	.word	0x40010800
 80017d0:	40010c00 	.word	0x40010c00
 80017d4:	40011000 	.word	0x40011000
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	807b      	strh	r3, [r7, #2]
 8001816:	4613      	mov	r3, r2
 8001818:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800181a:	787b      	ldrb	r3, [r7, #1]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001820:	887a      	ldrh	r2, [r7, #2]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001826:	e003      	b.n	8001830 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	041a      	lsls	r2, r3, #16
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	611a      	str	r2, [r3, #16]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800184c:	887a      	ldrh	r2, [r7, #2]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	041a      	lsls	r2, r3, #16
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43d9      	mvns	r1, r3
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	400b      	ands	r3, r1
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e26c      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8087 	beq.w	800199a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800188c:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d00c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001898:	4b8f      	ldr	r3, [pc, #572]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d112      	bne.n	80018ca <HAL_RCC_OscConfig+0x5e>
 80018a4:	4b8c      	ldr	r3, [pc, #560]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d10b      	bne.n	80018ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b2:	4b89      	ldr	r3, [pc, #548]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d06c      	beq.n	8001998 <HAL_RCC_OscConfig+0x12c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d168      	bne.n	8001998 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e246      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x76>
 80018d4:	4b80      	ldr	r3, [pc, #512]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a7f      	ldr	r2, [pc, #508]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e02e      	b.n	8001940 <HAL_RCC_OscConfig+0xd4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x98>
 80018ea:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a7a      	ldr	r2, [pc, #488]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b78      	ldr	r3, [pc, #480]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a77      	ldr	r2, [pc, #476]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xd4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0xbc>
 800190e:	4b72      	ldr	r3, [pc, #456]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a71      	ldr	r2, [pc, #452]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6e      	ldr	r2, [pc, #440]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xd4>
 8001928:	4b6b      	ldr	r3, [pc, #428]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a6a      	ldr	r2, [pc, #424]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a67      	ldr	r2, [pc, #412]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fcb6 	bl	80012b8 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fcb2 	bl	80012b8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1fa      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xe4>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fca2 	bl	80012b8 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc9e 	bl	80012b8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1e6      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x10c>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a6:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x18c>
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x176>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1ba      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4939      	ldr	r1, [pc, #228]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e03a      	b.n	8001a6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b36      	ldr	r3, [pc, #216]	; (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fc57 	bl	80012b8 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fc53 	bl	80012b8 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e19b      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4927      	ldr	r1, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fc36 	bl	80012b8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff fc32 	bl	80012b8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e17a      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d03a      	beq.n	8001af0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d019      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a88:	f7ff fc16 	bl	80012b8 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff fc12 	bl	80012b8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e15a      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f000 faa6 	bl	8002000 <RCC_Delay>
 8001ab4:	e01c      	b.n	8001af0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7ff fbfc 	bl	80012b8 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac2:	e00f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fbf8 	bl	80012b8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d908      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e140      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	42420000 	.word	0x42420000
 8001ae0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b9e      	ldr	r3, [pc, #632]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e9      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80a6 	beq.w	8001c4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b97      	ldr	r3, [pc, #604]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10d      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b94      	ldr	r3, [pc, #592]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a93      	ldr	r2, [pc, #588]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b91      	ldr	r3, [pc, #580]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	4b8e      	ldr	r3, [pc, #568]	; (8001d64 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d118      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b36:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <HAL_RCC_OscConfig+0x4f8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a8a      	ldr	r2, [pc, #552]	; (8001d64 <HAL_RCC_OscConfig+0x4f8>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fbb9 	bl	80012b8 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4a:	f7ff fbb5 	bl	80012b8 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b64      	cmp	r3, #100	; 0x64
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0fd      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x312>
 8001b70:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	e02d      	b.n	8001bda <HAL_RCC_OscConfig+0x36e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x334>
 8001b86:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a75      	ldr	r2, [pc, #468]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a72      	ldr	r2, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	e01c      	b.n	8001bda <HAL_RCC_OscConfig+0x36e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x356>
 8001ba8:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a6c      	ldr	r2, [pc, #432]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6213      	str	r3, [r2, #32]
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a69      	ldr	r2, [pc, #420]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	e00b      	b.n	8001bda <HAL_RCC_OscConfig+0x36e>
 8001bc2:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a66      	ldr	r2, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a63      	ldr	r2, [pc, #396]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d015      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fb69 	bl	80012b8 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff fb65 	bl	80012b8 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0ab      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ee      	beq.n	8001bea <HAL_RCC_OscConfig+0x37e>
 8001c0c:	e014      	b.n	8001c38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb53 	bl	80012b8 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7ff fb4f 	bl	80012b8 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e095      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1ee      	bne.n	8001c16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d105      	bne.n	8001c4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3e:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a47      	ldr	r2, [pc, #284]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8081 	beq.w	8001d56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d061      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d146      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_OscConfig+0x4fc>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fb23 	bl	80012b8 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c76:	f7ff fb1f 	bl	80012b8 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e067      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9c:	d108      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c9e:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	492d      	ldr	r1, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a19      	ldr	r1, [r3, #32]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	4927      	ldr	r1, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x4fc>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff faf3 	bl	80012b8 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff faef 	bl	80012b8 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e037      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x46a>
 8001cf4:	e02f      	b.n	8001d56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_RCC_OscConfig+0x4fc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fadc 	bl	80012b8 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff fad8 	bl	80012b8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e020      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x498>
 8001d22:	e018      	b.n	8001d56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e013      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40007000 	.word	0x40007000
 8001d68:	42420060 	.word	0x42420060

08001d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0d0      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4965      	ldr	r1, [pc, #404]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b8      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc8:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de0:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a52      	ldr	r2, [pc, #328]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	494d      	ldr	r1, [pc, #308]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d040      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e073      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06b      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4936      	ldr	r1, [pc, #216]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff fa2c 	bl	80012b8 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff fa28 	bl	80012b8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e053      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d210      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4922      	ldr	r1, [pc, #136]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e032      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4916      	ldr	r1, [pc, #88]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	490e      	ldr	r1, [pc, #56]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001efa:	f000 f821 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	490a      	ldr	r1, [pc, #40]	; (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <HAL_RCC_ClockConfig+0x1cc>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1d0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f98a 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08002884 	.word	0x08002884
 8001f38:	20000078 	.word	0x20000078
 8001f3c:	2000007c 	.word	0x2000007c

08001f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b490      	push	{r4, r7}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f48:	1d3c      	adds	r4, r7, #4
 8001f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f50:	f240 2301 	movw	r3, #513	; 0x201
 8001f54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x40>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x46>
 8001f7e:	e02d      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f82:	623b      	str	r3, [r7, #32]
      break;
 8001f84:	e02d      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f92:	4413      	add	r3, r2
 8001f94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0c5b      	lsrs	r3, r3, #17
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbe:	fb02 f203 	mul.w	r2, r2, r3
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fca:	e004      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	623b      	str	r3, [r7, #32]
      break;
 8001fda:	e002      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fde:	623b      	str	r3, [r7, #32]
      break;
 8001fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc90      	pop	{r4, r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	08002874 	.word	0x08002874
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	007a1200 	.word	0x007a1200
 8001ffc:	003d0900 	.word	0x003d0900

08002000 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <RCC_Delay+0x34>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <RCC_Delay+0x38>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0a5b      	lsrs	r3, r3, #9
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800201c:	bf00      	nop
  }
  while (Delay --);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	60fa      	str	r2, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f9      	bne.n	800201c <RCC_Delay+0x1c>
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000078 	.word	0x20000078
 8002038:	10624dd3 	.word	0x10624dd3

0800203c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e041      	b.n	80020d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe ff52 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3304      	adds	r3, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4610      	mov	r0, r2
 800207c:	f000 fa6a 	bl	8002554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d001      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e035      	b.n	8002160 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a16      	ldr	r2, [pc, #88]	; (800216c <HAL_TIM_Base_Start_IT+0x90>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_TIM_Base_Start_IT+0x4e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d004      	beq.n	800212a <HAL_TIM_Base_Start_IT+0x4e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_TIM_Base_Start_IT+0x94>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d111      	bne.n	800214e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d010      	beq.n	800215e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214c:	e007      	b.n	800215e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40000400 	.word	0x40000400

08002174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0202 	mvn.w	r2, #2
 80021a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f9b1 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f9a4 	bl	800250c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f9b3 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0204 	mvn.w	r2, #4
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f987 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f97a 	bl	800250c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f989 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b08      	cmp	r3, #8
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b08      	cmp	r3, #8
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0208 	mvn.w	r2, #8
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2204      	movs	r2, #4
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f95d 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f950 	bl	800250c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f95f 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b10      	cmp	r3, #16
 8002284:	d122      	bne.n	80022cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b10      	cmp	r3, #16
 8002292:	d11b      	bne.n	80022cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0210 	mvn.w	r2, #16
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2208      	movs	r2, #8
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f933 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f926 	bl	800250c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f935 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0201 	mvn.w	r2, #1
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe ff4c 	bl	8001190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	2b80      	cmp	r3, #128	; 0x80
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fa67 	bl	80027f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f8f9 	bl	8002542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b20      	cmp	r3, #32
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b20      	cmp	r3, #32
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0220 	mvn.w	r2, #32
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa32 	bl	80027e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_TIM_ConfigClockSource+0x18>
 8002398:	2302      	movs	r3, #2
 800239a:	e0b3      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x180>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d4:	d03e      	beq.n	8002454 <HAL_TIM_ConfigClockSource+0xd0>
 80023d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023da:	f200 8087 	bhi.w	80024ec <HAL_TIM_ConfigClockSource+0x168>
 80023de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e2:	f000 8085 	beq.w	80024f0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ea:	d87f      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x168>
 80023ec:	2b70      	cmp	r3, #112	; 0x70
 80023ee:	d01a      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0xa2>
 80023f0:	2b70      	cmp	r3, #112	; 0x70
 80023f2:	d87b      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x168>
 80023f4:	2b60      	cmp	r3, #96	; 0x60
 80023f6:	d050      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x116>
 80023f8:	2b60      	cmp	r3, #96	; 0x60
 80023fa:	d877      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x168>
 80023fc:	2b50      	cmp	r3, #80	; 0x50
 80023fe:	d03c      	beq.n	800247a <HAL_TIM_ConfigClockSource+0xf6>
 8002400:	2b50      	cmp	r3, #80	; 0x50
 8002402:	d873      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x168>
 8002404:	2b40      	cmp	r3, #64	; 0x40
 8002406:	d058      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x136>
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d86f      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x168>
 800240c:	2b30      	cmp	r3, #48	; 0x30
 800240e:	d064      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x156>
 8002410:	2b30      	cmp	r3, #48	; 0x30
 8002412:	d86b      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x168>
 8002414:	2b20      	cmp	r3, #32
 8002416:	d060      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x156>
 8002418:	2b20      	cmp	r3, #32
 800241a:	d867      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x168>
 800241c:	2b00      	cmp	r3, #0
 800241e:	d05c      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x156>
 8002420:	2b10      	cmp	r3, #16
 8002422:	d05a      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002424:	e062      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6899      	ldr	r1, [r3, #8]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f000 f95c 	bl	80026f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002448:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	609a      	str	r2, [r3, #8]
      break;
 8002452:	e04e      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f000 f945 	bl	80026f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002476:	609a      	str	r2, [r3, #8]
      break;
 8002478:	e03b      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	461a      	mov	r2, r3
 8002488:	f000 f8bc 	bl	8002604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2150      	movs	r1, #80	; 0x50
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f913 	bl	80026be <TIM_ITRx_SetConfig>
      break;
 8002498:	e02b      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f000 f8da 	bl	8002660 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2160      	movs	r1, #96	; 0x60
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f903 	bl	80026be <TIM_ITRx_SetConfig>
      break;
 80024b8:	e01b      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f000 f89c 	bl	8002604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2140      	movs	r1, #64	; 0x40
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f8f3 	bl	80026be <TIM_ITRx_SetConfig>
      break;
 80024d8:	e00b      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f000 f8ea 	bl	80026be <TIM_ITRx_SetConfig>
        break;
 80024ea:	e002      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024ec:	bf00      	nop
 80024ee:	e000      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a25      	ldr	r2, [pc, #148]	; (80025fc <TIM_Base_SetConfig+0xa8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d007      	beq.n	800257c <TIM_Base_SetConfig+0x28>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002572:	d003      	beq.n	800257c <TIM_Base_SetConfig+0x28>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a22      	ldr	r2, [pc, #136]	; (8002600 <TIM_Base_SetConfig+0xac>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d108      	bne.n	800258e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <TIM_Base_SetConfig+0xa8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <TIM_Base_SetConfig+0x52>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d003      	beq.n	80025a6 <TIM_Base_SetConfig+0x52>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a17      	ldr	r2, [pc, #92]	; (8002600 <TIM_Base_SetConfig+0xac>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a07      	ldr	r2, [pc, #28]	; (80025fc <TIM_Base_SetConfig+0xa8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d103      	bne.n	80025ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	615a      	str	r2, [r3, #20]
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40000400 	.word	0x40000400

08002604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f023 0201 	bic.w	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800262e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f023 030a 	bic.w	r3, r3, #10
 8002640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 0210 	bic.w	r2, r3, #16
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800268a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800269c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	621a      	str	r2, [r3, #32]
}
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	f043 0307 	orr.w	r3, r3, #7
 80026e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b087      	sub	sp, #28
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	431a      	orrs	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4313      	orrs	r3, r2
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	609a      	str	r2, [r3, #8]
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002744:	2302      	movs	r3, #2
 8002746:	e041      	b.n	80027cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d004      	beq.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d10c      	bne.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400

080027e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <__libc_init_array>:
 8002804:	b570      	push	{r4, r5, r6, lr}
 8002806:	2600      	movs	r6, #0
 8002808:	4d0c      	ldr	r5, [pc, #48]	; (800283c <__libc_init_array+0x38>)
 800280a:	4c0d      	ldr	r4, [pc, #52]	; (8002840 <__libc_init_array+0x3c>)
 800280c:	1b64      	subs	r4, r4, r5
 800280e:	10a4      	asrs	r4, r4, #2
 8002810:	42a6      	cmp	r6, r4
 8002812:	d109      	bne.n	8002828 <__libc_init_array+0x24>
 8002814:	f000 f822 	bl	800285c <_init>
 8002818:	2600      	movs	r6, #0
 800281a:	4d0a      	ldr	r5, [pc, #40]	; (8002844 <__libc_init_array+0x40>)
 800281c:	4c0a      	ldr	r4, [pc, #40]	; (8002848 <__libc_init_array+0x44>)
 800281e:	1b64      	subs	r4, r4, r5
 8002820:	10a4      	asrs	r4, r4, #2
 8002822:	42a6      	cmp	r6, r4
 8002824:	d105      	bne.n	8002832 <__libc_init_array+0x2e>
 8002826:	bd70      	pop	{r4, r5, r6, pc}
 8002828:	f855 3b04 	ldr.w	r3, [r5], #4
 800282c:	4798      	blx	r3
 800282e:	3601      	adds	r6, #1
 8002830:	e7ee      	b.n	8002810 <__libc_init_array+0xc>
 8002832:	f855 3b04 	ldr.w	r3, [r5], #4
 8002836:	4798      	blx	r3
 8002838:	3601      	adds	r6, #1
 800283a:	e7f2      	b.n	8002822 <__libc_init_array+0x1e>
 800283c:	08002894 	.word	0x08002894
 8002840:	08002894 	.word	0x08002894
 8002844:	08002894 	.word	0x08002894
 8002848:	08002898 	.word	0x08002898

0800284c <memset>:
 800284c:	4603      	mov	r3, r0
 800284e:	4402      	add	r2, r0
 8002850:	4293      	cmp	r3, r2
 8002852:	d100      	bne.n	8002856 <memset+0xa>
 8002854:	4770      	bx	lr
 8002856:	f803 1b01 	strb.w	r1, [r3], #1
 800285a:	e7f9      	b.n	8002850 <memset+0x4>

0800285c <_init>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	bf00      	nop
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr

08002868 <_fini>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr
